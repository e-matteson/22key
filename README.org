* 22key

Firmware and keymapping tools for a chording keyboard with 22 keys.
It uses a teensy LC microcontroller.

Keymaps are represented with ascii art in =*.kmap= files. Periods are unpressed switches and asterisks are pressed switches. =dvorak2.kmap= is the only complete, usable keymap. An emacs mode providing syntax highlighting for kmap files is available in =kmap.el=.

=mapper.py= converts kmap files to c code, in =translate.ino=, that runs on the teensy.

=analyze_logs.py= can list common n-grams in a corpus and generate keymaps from the corpus using stochastic optimization. (This was inspired by the work of Martin Krzywinski.) The optimization doesn't work very well, and the keymap format it outputs is no longer compatible with =mapper.py=.

Unfinished.

[[https://cloud.githubusercontent.com/assets/7717625/11450394/376b944e-956c-11e5-9df8-5eeb21d6dc89.jpg]]



** BUGS / LIMITATIONS
- it assumes modifiers are mapped to only a single switch. Otherwise, it will pick one of the specified switch and ignore the others.
- it can't send a sustained keypress - so it's impossible to ctrl-click, for example
- you can't map multiple chords to the same letter/macro

** TODO 
*** add bluetooth 
- usb/Keyboard uses key names, BLEfriend uses HID codes (right?). figure out best way to handle both.

*** better mount.  ideas:
- flat wood top, cardboard buttresses underneath fit to leg 
- battery on strap - more easily replacable
- maybe innertube over electronics?
- 3d printed frame for the switches

** Everything below here is probably outdated  

*** Layout Optimization

1. make list of usable chords
2. pick layout metrics
3. use simulated annealing to determine best mapping between chords and characters

remove shifts and holds from corpus? all to lowercase

**** how to deal with physical shift:
upper/lower case letters have to stay together
but if others aren't restricted... how to handle swaps?
 pick two chords to swap. if either is in locked_pairs, swap both shifted and unshifted. else, randomly pick one of those to swap.

**** Metric. Prefer:
- min number of switches 
- min number switch changes between common digrams/trigrams
- index/middle over pinky/ring
- consecutive finger runs - same row, or monotonic
- balanced hand use - sustained switches, or new presses


